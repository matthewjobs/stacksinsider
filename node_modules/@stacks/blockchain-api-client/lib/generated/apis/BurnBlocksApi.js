"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks Blockchain API
 * Welcome to the API reference overview for the [Stacks Blockchain API](https://docs.hiro.so/stacks-blockchain-api).  [Download Postman collection](https://hirosystems.github.io/stacks-blockchain-api/collection.json)
 *
 * The version of the OpenAPI document: STACKS_API_VERSION
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurnBlocksApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class BurnBlocksApi extends runtime.BaseAPI {
    /**
     * Retrieves a single burn block
     * Get burn block
     */
    async getBurnBlockRaw(requestParameters, initOverrides) {
        if (requestParameters.heightOrHash === null || requestParameters.heightOrHash === undefined) {
            throw new runtime.RequiredError('heightOrHash', 'Required parameter requestParameters.heightOrHash was null or undefined when calling getBurnBlock.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/burn-blocks/{height_or_hash}`.replace(`{${"height_or_hash"}}`, encodeURIComponent(String(requestParameters.heightOrHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnBlockFromJSON)(jsonValue));
    }
    /**
     * Retrieves a single burn block
     * Get burn block
     */
    async getBurnBlock(requestParameters, initOverrides) {
        const response = await this.getBurnBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieves a list of recent burn blocks
     * Get burn blocks
     */
    async getBurnBlocksRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v2/burn-blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BurnBlockListResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieves a list of recent burn blocks
     * Get burn blocks
     */
    async getBurnBlocks(requestParameters, initOverrides) {
        const response = await this.getBurnBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.BurnBlocksApi = BurnBlocksApi;
//# sourceMappingURL=BurnBlocksApi.js.map